{
    "docs": [
        {
            "location": "/",
            "text": "OPPAS\n\n\nOPen PArametric Snake-robot\n\n\n\n\nOPPAS\n is a snake robot intended for research with robots that mimic the structure of a snake.\nThe main reason I started this project is because I wanted a fast way to produce a snake robot that was easy to build and deploy, but without the need of drastic changes if a component of the robot changes.\nThe master branch of the repository is hosted in \nOPPAS repository\n, but OPPAS's project files can be downloaded in \nhttps://grabcad.com/library/oppas-open-source-parametric-snake-robot-1\n.\n\n\nIn essence, a snake robot is very simple; it is a series of links connected by joints.\nHowever, the shape and size of the links and joints will change depending on the components you use.\nFor example, a big battery may requiere a long but slender link.\nBut, depending on the microcontroller you use, you may need a short but thick link.\nAlthough putting together a bunch of u-brackets and other rigid parts is easy, this leaves the electronics and other components exposed, while at the same time properly fixing the components to the robot may be difficult.\nBy making the design parametric, different snake robots can be produced, according to your requirements.\n\n\nAnother property I was interested in was modularity.\nBy modularity I mean that a module (link + joint) of the snake robot is composed of different elements that can be interchanged without needing to redesign other parts.\nFor example, if your snake robot requiers passive wheels (e.g., for achieving anisotropic friction) just design the 'belly' of the robot without altering the rest.\nOr, you may change the wheel's model and redesign the necessary part.\nYou are using a bigger battery that doesn't fit the current robot? Just make a longer link without affecting the joints.\n\n\nHowever, there are some sacrifices to be made to keep the desig as general as possible.\nSince the design is parametric (and the number of parameters is limited) the design is not optimal.\nIn other words, there may be a lot of \nwasted\n space inside the robot.\n\n\nOPPAS is an attempt to make snake robots easier to build and to test your ideas.\nIt is \nopen-source\n; the robot was designed using Autodesk Fusion 360.\nThe files can be downloaded and the whole project can be recreated in your computer.\nI consider this to be more useful than sharing .STL files that have to be downloaded and modified to fit your needs.\nAs mentioned before, OPPAS is \nparametric\n.\nRead the documentation for information about the available parameters.\nFinally, I wanted a robot that could be afforded by anyone.\nThe current version of OPPAS has been printed in ABS using a Zortrax M200.\nAlthough the Zortrax may not be affordable by everyone, I have printed also some parts in my own Overlord Pro, and although the tolerances are more difficult to overcome, it still works.\nEach module costs less than US$20 (using eSun ABS).\n\n\nThe library to control the servos \nDuoDMXL\n (Duo-Dynamixel) is being developed and documented in:\n\n\n\n\nDuoDMXL GitHub repository\n\n\nDuoDMXL documentation\n\n\n\n\nCurrent version\n\n\nAs of [2017-05-01]: OPPAS Mk. 1.0\n\n\nDesired requirements for future versions\n\n\nThere are several weak points in the current design of OPPAS.\nIn particular, I would like to improve the following points:\n\n\n\n\nWaterproof\n: Make the design waterproof.\n\n\nSupport for more servos\n:  Currently, OPPAS Mk. 1.0 is designed with the ROBOTIS MX-64 servos in mind. I would like to support more servo's models in the future, but parametrizing them is rather difficult (e.g., they have different shapes, the screw holes positions are in different arrangements).\n\n\nSmaller\n: Due to the MX-64 servo's size, OPPAS Mk 1.0 is \nbig\n in comparison to other snake robots. If possible, I would like to make it a little smaller next time.\n\n\n\n\nSections\n\n\nThis documentationis divided into the following sections:\n\n\n\n\n\n\n\n\nSection\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nHome\n\n\nIntroduction to OPPAS\n\n\n\n\n\n\nBody of \nOPPAS\n\n\nA detailed explanation of each part that composes \nOPPAS\n\n\n\n\n\n\nElectronic Design\n\n\nAn overview of the electronic setup considered. The details are being documented as different projects (e.g., \nDuoDMXL\n)\n\n\n\n\n\n\nAssemblies Examples\n\n\nA presentation of assemblies possible with \nOPPAS\n and current designs.\n\n\n\n\n\n\nPrototype Development\n\n\nAdditional information and pictures of an \nOPPAS\n protoype's development.\n\n\n\n\n\n\nAbout\n\n\nInformation about the author and how to contact him.\n\n\n\n\n\n\n\n\nLicense\n\n\nOPPAS\n is a project being developed in Ritsumeikan University, by the Biomimetic Intelligent Mechatronics (BioInMech) Laboratory.\n\nOPPAS\n is licensed under the \nCreative Commons Attribution 4.0 International\n license to \nFabian Eugenio Reyes Pinner\n (Fabian Reyes) (2017).\nFind more information in the \nAbout\n section.\n\n\nThis work is licensed under a \nCreative Commons Attribution 4.0 International License\n.",
            "title": "Home"
        },
        {
            "location": "/#oppas",
            "text": "",
            "title": "OPPAS"
        },
        {
            "location": "/#open-parametric-snake-robot",
            "text": "OPPAS  is a snake robot intended for research with robots that mimic the structure of a snake.\nThe main reason I started this project is because I wanted a fast way to produce a snake robot that was easy to build and deploy, but without the need of drastic changes if a component of the robot changes.\nThe master branch of the repository is hosted in  OPPAS repository , but OPPAS's project files can be downloaded in  https://grabcad.com/library/oppas-open-source-parametric-snake-robot-1 .  In essence, a snake robot is very simple; it is a series of links connected by joints.\nHowever, the shape and size of the links and joints will change depending on the components you use.\nFor example, a big battery may requiere a long but slender link.\nBut, depending on the microcontroller you use, you may need a short but thick link.\nAlthough putting together a bunch of u-brackets and other rigid parts is easy, this leaves the electronics and other components exposed, while at the same time properly fixing the components to the robot may be difficult.\nBy making the design parametric, different snake robots can be produced, according to your requirements.  Another property I was interested in was modularity.\nBy modularity I mean that a module (link + joint) of the snake robot is composed of different elements that can be interchanged without needing to redesign other parts.\nFor example, if your snake robot requiers passive wheels (e.g., for achieving anisotropic friction) just design the 'belly' of the robot without altering the rest.\nOr, you may change the wheel's model and redesign the necessary part.\nYou are using a bigger battery that doesn't fit the current robot? Just make a longer link without affecting the joints.  However, there are some sacrifices to be made to keep the desig as general as possible.\nSince the design is parametric (and the number of parameters is limited) the design is not optimal.\nIn other words, there may be a lot of  wasted  space inside the robot.  OPPAS is an attempt to make snake robots easier to build and to test your ideas.\nIt is  open-source ; the robot was designed using Autodesk Fusion 360.\nThe files can be downloaded and the whole project can be recreated in your computer.\nI consider this to be more useful than sharing .STL files that have to be downloaded and modified to fit your needs.\nAs mentioned before, OPPAS is  parametric .\nRead the documentation for information about the available parameters.\nFinally, I wanted a robot that could be afforded by anyone.\nThe current version of OPPAS has been printed in ABS using a Zortrax M200.\nAlthough the Zortrax may not be affordable by everyone, I have printed also some parts in my own Overlord Pro, and although the tolerances are more difficult to overcome, it still works.\nEach module costs less than US$20 (using eSun ABS).  The library to control the servos  DuoDMXL  (Duo-Dynamixel) is being developed and documented in:   DuoDMXL GitHub repository  DuoDMXL documentation",
            "title": "OPen PArametric Snake-robot"
        },
        {
            "location": "/#current-version",
            "text": "As of [2017-05-01]: OPPAS Mk. 1.0",
            "title": "Current version"
        },
        {
            "location": "/#desired-requirements-for-future-versions",
            "text": "There are several weak points in the current design of OPPAS.\nIn particular, I would like to improve the following points:   Waterproof : Make the design waterproof.  Support for more servos :  Currently, OPPAS Mk. 1.0 is designed with the ROBOTIS MX-64 servos in mind. I would like to support more servo's models in the future, but parametrizing them is rather difficult (e.g., they have different shapes, the screw holes positions are in different arrangements).  Smaller : Due to the MX-64 servo's size, OPPAS Mk 1.0 is  big  in comparison to other snake robots. If possible, I would like to make it a little smaller next time.",
            "title": "Desired requirements for future versions"
        },
        {
            "location": "/#sections",
            "text": "This documentationis divided into the following sections:     Section  Description      Home  Introduction to OPPAS    Body of  OPPAS  A detailed explanation of each part that composes  OPPAS    Electronic Design  An overview of the electronic setup considered. The details are being documented as different projects (e.g.,  DuoDMXL )    Assemblies Examples  A presentation of assemblies possible with  OPPAS  and current designs.    Prototype Development  Additional information and pictures of an  OPPAS  protoype's development.    About  Information about the author and how to contact him.",
            "title": "Sections"
        },
        {
            "location": "/#license",
            "text": "OPPAS  is a project being developed in Ritsumeikan University, by the Biomimetic Intelligent Mechatronics (BioInMech) Laboratory. OPPAS  is licensed under the  Creative Commons Attribution 4.0 International  license to  Fabian Eugenio Reyes Pinner  (Fabian Reyes) (2017).\nFind more information in the  About  section.  This work is licensed under a  Creative Commons Attribution 4.0 International License .",
            "title": "License"
        },
        {
            "location": "/structure/introduction/",
            "text": "Introduction to OPPAS\n\n\nThe main idea of \nOPPAS\n is to provide a plataform for developers interested in snake robots or similar.\nA module of \nOPPAS\n consists of a link and a joint.\nA link and joint are further divided into the following parts:\n\n\n\n\nThe main idea of the design of parts was to separate the parts according to their role in the robot:\n\n\n\n\nSkeleton: The spine, ribs and caps provide the main (kinematic) structure of the robot. It provides the main shape and can also be used as a base for the components.\n\n\nFlesh: It provides the interface between the robot and the exterior. At the same time it protects the components (i.e., do not allow the boards and cables to be completely exposed).\n\n\nJoint: The servos or other actuators are mounted at the joint, providing motion.\n\n\n\n\nOverview of OPPAS and electronic setup\n\n\nCurrently, the servos chosen for \nOPPAS\n are Dynamixel MX-64AR servomotors from \nROBOTIS\n.\nThe microcontroller used is a Duo (RedBear) along a Rs-45 transceiver for communication with the servos.\nA library and extra hardware has been developed and documented in \nDuoDMXL\n.\nThen, a multi-link \nOPPAS\n along an overview of the electronics can be represented in the following picture:\n\n\n\n\nA microcontroller is mounted on \nOPPAS\n and serves the role of main micrcontroller on the robot.\nIt controls all the servos and, in future implementations it will also gather readings from sensors and finally comunicate with an external computer.\nThe final objective of \nOPPAS\n is to have a closed-loop system.",
            "title": "Introduction to OPPAS Structure"
        },
        {
            "location": "/structure/introduction/#introduction-to-oppas",
            "text": "The main idea of  OPPAS  is to provide a plataform for developers interested in snake robots or similar.\nA module of  OPPAS  consists of a link and a joint.\nA link and joint are further divided into the following parts:   The main idea of the design of parts was to separate the parts according to their role in the robot:   Skeleton: The spine, ribs and caps provide the main (kinematic) structure of the robot. It provides the main shape and can also be used as a base for the components.  Flesh: It provides the interface between the robot and the exterior. At the same time it protects the components (i.e., do not allow the boards and cables to be completely exposed).  Joint: The servos or other actuators are mounted at the joint, providing motion.",
            "title": "Introduction to OPPAS"
        },
        {
            "location": "/structure/introduction/#overview-of-oppas-and-electronic-setup",
            "text": "Currently, the servos chosen for  OPPAS  are Dynamixel MX-64AR servomotors from  ROBOTIS .\nThe microcontroller used is a Duo (RedBear) along a Rs-45 transceiver for communication with the servos.\nA library and extra hardware has been developed and documented in  DuoDMXL .\nThen, a multi-link  OPPAS  along an overview of the electronics can be represented in the following picture:   A microcontroller is mounted on  OPPAS  and serves the role of main micrcontroller on the robot.\nIt controls all the servos and, in future implementations it will also gather readings from sensors and finally comunicate with an external computer.\nThe final objective of  OPPAS  is to have a closed-loop system.",
            "title": "Overview of OPPAS and electronic setup"
        },
        {
            "location": "/structure/module/",
            "text": "Introduction\n\n\nAs mentioned before, a module of \nOPPAS\n is divided into two parts: the \nlink\n and the \njoint\n.\nThe link's main objective is to give structure to the robot and it has a big influence on the total length of the robot.\nIn addition it will house the components (e.g., batteries, sensors, microcontroller boards).\nDepending on the robot you need, you may skip the link altogether and just put together a bunch of joints.\n\n\nLink of OPPAS\n\n\nThe link is divided into two sets of parts: the \nskeleton\n and the \nflesh\n.\nThe main role of the skeleton is to provide the structure of the robot.\nThe main parts of the skeleton are:\n\n\n\n\n\n\n\n\nPart\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nspine\n\n\nProvides the main support for the link\n\n\n\n\n\n\nribs\n\n\nAdditional strucutre to attach the flesh components to the spine\n\n\n\n\n\n\ncaps\n\n\nIt helps to put all together and enclose the internal components. It also provides an iterface with the joint's parts\n\n\n\n\n\n\n\n\nSpine\n\n\nThe design of the spine provides a flexible way to attach extra components.\nThe idea is that you can design a specific base for the components you use, and then attach it to the spine.\nThe spine has a set of rails and the geometry of these can be controlled parametrically.\nThe final length of the spine is controlled by the number of segments (rail's teeth + spacing) and the geometry of these.\n\n\n\n\nThe main parameters of the spine that can be changed are summarized as follows:\n\n\n\n\n\n\n\n\nSpine's parameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nspineInnerDiameter\n\n\nThe spine has an hexagonal cross-section, circumscribed on a circle with a diameter called \nspineInnerDiameter\n. A set of four M2.5 screw holes are automatically generated, coincident with a circle 80% the size of \nspineInnerDiameter\n. This allows the holes to be generated automatically and always consistent with the spine diameter. Change this parameter to a fixed value if you require it.\n\n\n\n\n\n\nrail*\n\n\nThe set of parameters related to the rail design (\nrailNeck\n, \nrailWidth\n, \nrailInnerWidth\n, \nrailHeight\n) controls the geometry of the cross-section of the rail. The parameters \nrailSpacing\n and \nrailThickness\n control their geometry along the longitudinal axis of the spine. One 'segment' is composed of one rail's segment (I sometimes call them teeth) and a spacing.\n\n\n\n\n\n\nnoSegments\n\n\nNumber of segments (rail's tooth + its spacing) composing the spine.\n\n\n\n\n\n\nlinkLength\n\n\nThe final length of the link is controlled by how many segments (a tooth and its spacing) you need, and its size controlled by \nrailSpacing\n and \nrailThickness\n. If you need a constant rail just set \nrailSpacing\n=0, \nrailThickness\n=desired length, and \nnoSegments\n=1. This allows to generate a link always consistent with a discrete number of teeth.\n\n\n\n\n\n\n\n\nRib\n\n\nThe main role of the ribs is to attach the flesh components to the spine.\nA secondary objective I had into mind is to also provide a strucutre to attach extra components (e.g., sensors) if required.\nHowever, I have not implemented this yet.\n\n\nOnce the three components of the flesh are slided into the ribs, their movement is constrained without the need of extra parts, like bolts or screws.\nThe model of \nOPPAS\n that can be currently downloaded does not provide additional holes to attach the vertebras to the spine.\nIt relies completely on friction and the form-closure achieved when the \nflesh\n parts are attached.\nThis is to keep the design consistent and avoid problems, since a screw hole of a given size may not be compatible with the user's chosen \nrailThickness\n.\n\n\n\n\nThe main parameters of the ribs that can be changed are summarized as follows:\n\n\n\n\n\n\n\n\nRib's parameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmidCircle\n\n\nThis parameter is seen along several parts of \nOPPAS\n. For the ribs, it works along \nouterCircle\n to generate the strucutre of the ribs.\n\n\n\n\n\n\nouterCircle\n\n\nThis parameter controls the size of the ribs. An equilaterla triangle is inscribed into a circle with diameter \nouterCircle\n and used to control the rib's size. \nNote\n: The parameters \nmidCircle\n and \nouterCircle\n should always follow the constraing: \n|outerCircle| > |midCircle|\n. I have not found a good bound on this value (since the geometry is influenced by other parameters), but try to keep it with at least a 10[mm] difference.\n\n\n\n\n\n\nribCircle\n\n\nFinal parameter to control the size of the rib. This parameter is not used in any other part of the design.\n\n\n\n\n\n\n\n\nCaps (also called moduleCaps)\n\n\nThe caps enclose the link and provide an interface with the joints.\nIn addition, the interior of the caps accomodates to the ribs for extra support.\nFour slots are provided to pass cables, which location and size can be controlled by the user.\nAdditional pegs provide extra strength to the design to avoid rotations along the longitudinal axis.\n\n\n\n\nThe main parameters of the caps that can be changed are summarized as follows:\n\n\n\n\n\n\n\n\nCap's parameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncapDiameter\n\n\nThe outer diameter of the caps. It should be at least as big as \nouterCircle\n, but I recommend it a little bigger. In current implementation of \nOPPAS\n, the value is set as \ncapDiameter = 1.1*outerCircle\n.\n\n\n\n\n\n\nouterCircle\n\n\nOuter circle will be the diameter of the cap contacting the joint's parts.\n\n\n\n\n\n\ncapThickness\n\n\nThickness od the cap (not considering the internal cavity where the ribs fit).\n\n\n\n\n\n\nslotDiameter\n\n\nControl the location of the slots. In the current design of \nOPPAS\n, the parameter is set as \nslotDiameter = 0.5*midCircle\n to keep the design consistent. If requiered, change this to a fixed value.\n\n\n\n\n\n\nslotThikness\n\n\nThickness of the slots.\n\n\n\n\n\n\nslotLength\n\n\nLength of the slots.\n\n\n\n\n\n\nslotHole\n\n\nDiameter of the slot's hole. Use this to pass cables with connectors. In general, I advice \nslotHole\n to be at least 10[mm].\n\n\n\n\n\n\nmidCircle\n\n\nA set of four pegs are generated automatically at a circle with this diameter. If needed, change this to a fixed value.\n\n\n\n\n\n\ncapPegDiam\n\n\nDiameter of the pegs.\n\n\n\n\n\n\ncapPegDepth\n\n\nLength of the pegs. I use 'depth' since a matching hole is generated into other parts.\n\n\n\n\n\n\n\n\nFlesh\n\n\nThe \nflesh\n components are the main interface between the robot and the exterior.\nThese parts can be designed independently from the rest of the design, but I provide a set of parts as an example.\nThe \nflesh\n parts slide into the ribs and provide extra constraints.\nOnce all parts of the flesh are inserted, the ribs should not be able to come apart from the spine.\n\n\n\n\nThe main parameters of the flesh that can be changed are summarized as follows:\n\n\n\n\n\n\n\n\nFlesh's parameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfleshInnerDiameter\n\n\nThe inner diameter of the flesh parts is controlled by this parameter. The strength and available space inside the robot are affected. The outer size is the same as \ncapDiameter\n. You can change these values accordint to your application.\n\n\n\n\n\n\nribRail*\n\n\nThe set of parameters (\nribRailThickness\n, \nribRailWidth\n, and \nribRailDepth\n) control the geometry of the rails that slide into the ribs. There is a built-in tolerance for the rails, so that they fit correctly into the ribs even if there is shrinking of the material.\n\n\n\n\n\n\n\n\nThe \nflesh\n parts in \nOPPAS\n Mk. 1 should not be considered as a definite design.\nThe purpose of \nOPPAS\n is that they can be redesigned to accomodate to your needs, without needing to change (drastically) the rest of the parts.\nSeveral designs of the \nflesh\n could be designed and used in the same base robot.\nChek the section \nOptional parts\n for a description of some parts that have been designed so far.\n\n\nA \nflesh\n part with the \nBioInMech\n (Biomimetic Intellignet Mechatronics) Laboratory is provided.\n\n\n\n\nJoint of OPPAS\n\n\nThe joint of \nOPPAS\n is composed of two parts: \nuBracket\n and \nservoBase\n.\nThese are the parts that would requiere the most effort from the user if another servo is used.\nI apologize for this, but I have not found a good and reliable way to parametrize this, since the desgin of servomotros is in general very inconsistent.\n\nOPPAS\n Mk. 1.0 is designed with Dynamixel MX-64AR servos in mind.\nHowever, some  of the parameters can be changed by the user to get a design as close as possible as the one requiered.\n\n\nuBracket\n\n\nThe \nuBracket\n connects the servo's horn to the link, providing motion.\nThere are four slots, designed so that the link can be connected with a 90[deg] angle to provide flexibility in the construction of your robot.\nIf the axes of all servos are parallel, the result is what is known as 'planar snake robot'.\nWhat is known as 'serpentine' or 'undulatory' locomotion can be achieved.\nWith the motors connected with an offset of 90[deg], 3D motions can be achieved.\nHowever, I cannot guarantee the robustness of the current implementation of \nOPPAS\n, sine 3D motion usually comes with impacts and additional interaction with the environment.\n\n\n\n\nThe outer diameter of the uBracket is controlled by \ncapDiameter\n and the slots are designed to math the ones in the module caps.\nThe main parameters of the uBracket that can be changed are summarized as follows:\n\n\n\n\n\n\n\n\nFlesh's parameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nuBracketThickness\n\n\nThickness of the uBracket.\n\n\n\n\n\n\nhornLength\n\n\nDistance from the uBracket base to the axis of the servomotor. The longer \nhornLength\nis, the bigger the range of motion of the joint. However, this means a weaker uBracket.\n\n\n\n\n\n\n\n\nservoBase\n\n\nThe servoBase of \nOPPAS\n is designed for the MX-64AR servos of ROBOTIS. Therefore, no extra parameters are provided to the user.\n\n\n\n\nResult\n\n\nThe final module obtained can be seen in the following picture.\n\n\n\n\nThe values for the parameters are summarized in the following table:",
            "title": "A module: Link + joint"
        },
        {
            "location": "/structure/module/#introduction",
            "text": "As mentioned before, a module of  OPPAS  is divided into two parts: the  link  and the  joint .\nThe link's main objective is to give structure to the robot and it has a big influence on the total length of the robot.\nIn addition it will house the components (e.g., batteries, sensors, microcontroller boards).\nDepending on the robot you need, you may skip the link altogether and just put together a bunch of joints.",
            "title": "Introduction"
        },
        {
            "location": "/structure/module/#link-of-oppas",
            "text": "The link is divided into two sets of parts: the  skeleton  and the  flesh .\nThe main role of the skeleton is to provide the structure of the robot.\nThe main parts of the skeleton are:     Part  Description      spine  Provides the main support for the link    ribs  Additional strucutre to attach the flesh components to the spine    caps  It helps to put all together and enclose the internal components. It also provides an iterface with the joint's parts",
            "title": "Link of OPPAS"
        },
        {
            "location": "/structure/module/#spine",
            "text": "The design of the spine provides a flexible way to attach extra components.\nThe idea is that you can design a specific base for the components you use, and then attach it to the spine.\nThe spine has a set of rails and the geometry of these can be controlled parametrically.\nThe final length of the spine is controlled by the number of segments (rail's teeth + spacing) and the geometry of these.   The main parameters of the spine that can be changed are summarized as follows:     Spine's parameter  Description      spineInnerDiameter  The spine has an hexagonal cross-section, circumscribed on a circle with a diameter called  spineInnerDiameter . A set of four M2.5 screw holes are automatically generated, coincident with a circle 80% the size of  spineInnerDiameter . This allows the holes to be generated automatically and always consistent with the spine diameter. Change this parameter to a fixed value if you require it.    rail*  The set of parameters related to the rail design ( railNeck ,  railWidth ,  railInnerWidth ,  railHeight ) controls the geometry of the cross-section of the rail. The parameters  railSpacing  and  railThickness  control their geometry along the longitudinal axis of the spine. One 'segment' is composed of one rail's segment (I sometimes call them teeth) and a spacing.    noSegments  Number of segments (rail's tooth + its spacing) composing the spine.    linkLength  The final length of the link is controlled by how many segments (a tooth and its spacing) you need, and its size controlled by  railSpacing  and  railThickness . If you need a constant rail just set  railSpacing =0,  railThickness =desired length, and  noSegments =1. This allows to generate a link always consistent with a discrete number of teeth.",
            "title": "Spine"
        },
        {
            "location": "/structure/module/#rib",
            "text": "The main role of the ribs is to attach the flesh components to the spine.\nA secondary objective I had into mind is to also provide a strucutre to attach extra components (e.g., sensors) if required.\nHowever, I have not implemented this yet.  Once the three components of the flesh are slided into the ribs, their movement is constrained without the need of extra parts, like bolts or screws.\nThe model of  OPPAS  that can be currently downloaded does not provide additional holes to attach the vertebras to the spine.\nIt relies completely on friction and the form-closure achieved when the  flesh  parts are attached.\nThis is to keep the design consistent and avoid problems, since a screw hole of a given size may not be compatible with the user's chosen  railThickness .   The main parameters of the ribs that can be changed are summarized as follows:     Rib's parameter  Description      midCircle  This parameter is seen along several parts of  OPPAS . For the ribs, it works along  outerCircle  to generate the strucutre of the ribs.    outerCircle  This parameter controls the size of the ribs. An equilaterla triangle is inscribed into a circle with diameter  outerCircle  and used to control the rib's size.  Note : The parameters  midCircle  and  outerCircle  should always follow the constraing:  |outerCircle| > |midCircle| . I have not found a good bound on this value (since the geometry is influenced by other parameters), but try to keep it with at least a 10[mm] difference.    ribCircle  Final parameter to control the size of the rib. This parameter is not used in any other part of the design.",
            "title": "Rib"
        },
        {
            "location": "/structure/module/#caps-also-called-modulecaps",
            "text": "The caps enclose the link and provide an interface with the joints.\nIn addition, the interior of the caps accomodates to the ribs for extra support.\nFour slots are provided to pass cables, which location and size can be controlled by the user.\nAdditional pegs provide extra strength to the design to avoid rotations along the longitudinal axis.   The main parameters of the caps that can be changed are summarized as follows:     Cap's parameter  Description      capDiameter  The outer diameter of the caps. It should be at least as big as  outerCircle , but I recommend it a little bigger. In current implementation of  OPPAS , the value is set as  capDiameter = 1.1*outerCircle .    outerCircle  Outer circle will be the diameter of the cap contacting the joint's parts.    capThickness  Thickness od the cap (not considering the internal cavity where the ribs fit).    slotDiameter  Control the location of the slots. In the current design of  OPPAS , the parameter is set as  slotDiameter = 0.5*midCircle  to keep the design consistent. If requiered, change this to a fixed value.    slotThikness  Thickness of the slots.    slotLength  Length of the slots.    slotHole  Diameter of the slot's hole. Use this to pass cables with connectors. In general, I advice  slotHole  to be at least 10[mm].    midCircle  A set of four pegs are generated automatically at a circle with this diameter. If needed, change this to a fixed value.    capPegDiam  Diameter of the pegs.    capPegDepth  Length of the pegs. I use 'depth' since a matching hole is generated into other parts.",
            "title": "Caps (also called moduleCaps)"
        },
        {
            "location": "/structure/module/#flesh",
            "text": "The  flesh  components are the main interface between the robot and the exterior.\nThese parts can be designed independently from the rest of the design, but I provide a set of parts as an example.\nThe  flesh  parts slide into the ribs and provide extra constraints.\nOnce all parts of the flesh are inserted, the ribs should not be able to come apart from the spine.   The main parameters of the flesh that can be changed are summarized as follows:     Flesh's parameter  Description      fleshInnerDiameter  The inner diameter of the flesh parts is controlled by this parameter. The strength and available space inside the robot are affected. The outer size is the same as  capDiameter . You can change these values accordint to your application.    ribRail*  The set of parameters ( ribRailThickness ,  ribRailWidth , and  ribRailDepth ) control the geometry of the rails that slide into the ribs. There is a built-in tolerance for the rails, so that they fit correctly into the ribs even if there is shrinking of the material.     The  flesh  parts in  OPPAS  Mk. 1 should not be considered as a definite design.\nThe purpose of  OPPAS  is that they can be redesigned to accomodate to your needs, without needing to change (drastically) the rest of the parts.\nSeveral designs of the  flesh  could be designed and used in the same base robot.\nChek the section  Optional parts  for a description of some parts that have been designed so far.  A  flesh  part with the  BioInMech  (Biomimetic Intellignet Mechatronics) Laboratory is provided.",
            "title": "Flesh"
        },
        {
            "location": "/structure/module/#joint-of-oppas",
            "text": "The joint of  OPPAS  is composed of two parts:  uBracket  and  servoBase .\nThese are the parts that would requiere the most effort from the user if another servo is used.\nI apologize for this, but I have not found a good and reliable way to parametrize this, since the desgin of servomotros is in general very inconsistent. OPPAS  Mk. 1.0 is designed with Dynamixel MX-64AR servos in mind.\nHowever, some  of the parameters can be changed by the user to get a design as close as possible as the one requiered.",
            "title": "Joint of OPPAS"
        },
        {
            "location": "/structure/module/#ubracket",
            "text": "The  uBracket  connects the servo's horn to the link, providing motion.\nThere are four slots, designed so that the link can be connected with a 90[deg] angle to provide flexibility in the construction of your robot.\nIf the axes of all servos are parallel, the result is what is known as 'planar snake robot'.\nWhat is known as 'serpentine' or 'undulatory' locomotion can be achieved.\nWith the motors connected with an offset of 90[deg], 3D motions can be achieved.\nHowever, I cannot guarantee the robustness of the current implementation of  OPPAS , sine 3D motion usually comes with impacts and additional interaction with the environment.   The outer diameter of the uBracket is controlled by  capDiameter  and the slots are designed to math the ones in the module caps.\nThe main parameters of the uBracket that can be changed are summarized as follows:     Flesh's parameter  Description      uBracketThickness  Thickness of the uBracket.    hornLength  Distance from the uBracket base to the axis of the servomotor. The longer  hornLength is, the bigger the range of motion of the joint. However, this means a weaker uBracket.",
            "title": "uBracket"
        },
        {
            "location": "/structure/module/#servobase",
            "text": "The servoBase of  OPPAS  is designed for the MX-64AR servos of ROBOTIS. Therefore, no extra parameters are provided to the user.",
            "title": "servoBase"
        },
        {
            "location": "/structure/module/#result",
            "text": "The final module obtained can be seen in the following picture.   The values for the parameters are summarized in the following table:",
            "title": "Result"
        },
        {
            "location": "/structure/optional/",
            "text": "Optional parts\n\n\nDifferent Bellies\n\n\nAdditional parts are provided, both as a source of inspiration and as a quick way to implement a working prototype.\nThe belly of the robot (called \nfleshBottom\n) can be designed according to the application.\nThree models are provided in the current project of \nOPPAS\n.\n\n\n\n\n\n\n\n\nOptional part\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfleshBottomGeneric\n\n\nA bottom part without any additional component.\n\n\n\n\n\n\nfleshBottomTwoWheels\n\n\nA bottom part with two wheels to provide anisotropic friction with the ground.\n\n\n\n\n\n\nfleshBottomBearing\n\n\nA part with a (Tamiya) spherical bearing. The objective is to remove the friction altogether. The model of the bearing can be found in the \nTamiya 70144 Caster Ball\n project at \nGRABCAD\n.\n\n\n\n\n\n\n\n\n\n\nTail\n\n\nThe tail's design would depend on the user's requirements.\nFor completeness' sake, we provide a tail design currently being used for our research.\nThe tail's parameters are the same as previous parts but is provided as a separate file (to keep the main file of the module of \nOPPAS\n as fast and small as possible).\n\n\n\n\nThe current implementation of the tail includes a 'base' (e.g., for a microcontroller board) and two \ntoggle switches\n.",
            "title": "Optional Parts"
        },
        {
            "location": "/structure/optional/#optional-parts",
            "text": "",
            "title": "Optional parts"
        },
        {
            "location": "/structure/optional/#different-bellies",
            "text": "Additional parts are provided, both as a source of inspiration and as a quick way to implement a working prototype.\nThe belly of the robot (called  fleshBottom ) can be designed according to the application.\nThree models are provided in the current project of  OPPAS .     Optional part  Description      fleshBottomGeneric  A bottom part without any additional component.    fleshBottomTwoWheels  A bottom part with two wheels to provide anisotropic friction with the ground.    fleshBottomBearing  A part with a (Tamiya) spherical bearing. The objective is to remove the friction altogether. The model of the bearing can be found in the  Tamiya 70144 Caster Ball  project at  GRABCAD .",
            "title": "Different Bellies"
        },
        {
            "location": "/structure/optional/#tail",
            "text": "The tail's design would depend on the user's requirements.\nFor completeness' sake, we provide a tail design currently being used for our research.\nThe tail's parameters are the same as previous parts but is provided as a separate file (to keep the main file of the module of  OPPAS  as fast and small as possible).   The current implementation of the tail includes a 'base' (e.g., for a microcontroller board) and two  toggle switches .",
            "title": "Tail"
        },
        {
            "location": "/electronics/",
            "text": "Overview of the electronics\n\n\nOPPAS\n Mk. 1.0 uses a \nDuo\n as main microcontroller board.\nA library for controlling the Dynamixel servos (called \nDuoDMXL\n) has been developed and is currently being documented in:\n\n\n\n\nDuoDMXL GitHub repository\n\n\nDuoDMXL documentation\n\n\n\n\nThe overviewof the electronics setup can be seen in the following picture:\n\n\n\n\nThe MX-64AR servos require additional hardware for communication.\nCheck the documentation of \nDuoDMXL\n for additional information.",
            "title": "Electronic Design"
        },
        {
            "location": "/electronics/#overview-of-the-electronics",
            "text": "OPPAS  Mk. 1.0 uses a  Duo  as main microcontroller board.\nA library for controlling the Dynamixel servos (called  DuoDMXL ) has been developed and is currently being documented in:   DuoDMXL GitHub repository  DuoDMXL documentation   The overviewof the electronics setup can be seen in the following picture:   The MX-64AR servos require additional hardware for communication.\nCheck the documentation of  DuoDMXL  for additional information.",
            "title": "Overview of the electronics"
        },
        {
            "location": "/assemblies/",
            "text": "Whole Assembly\n\n\nIn this image, a design consisting of four modules of \nOPPAS\n can be seen.\nThe meaning of 'whole assembly' is that both the link and joint parts are used.\nIn this example, all the axes of the joints are parallel, meaning that the resulting robot is a \nplanar snake robot\n.\n\n\n\n\nMinimal Assembly\n\n\nA minimal assebly consists of only joint parts connected.\nThis arrangement would requiere a tether line for both power and control, but depending on the application it may be a better choice.\nIn this case, the axes of the joints have a difference of 90[deg] between each other, proviging 3D motion to the robot.\nOther types of locomotion can be implemented, like sidewinding.",
            "title": "Assemblies Examples"
        },
        {
            "location": "/assemblies/#whole-assembly",
            "text": "In this image, a design consisting of four modules of  OPPAS  can be seen.\nThe meaning of 'whole assembly' is that both the link and joint parts are used.\nIn this example, all the axes of the joints are parallel, meaning that the resulting robot is a  planar snake robot .",
            "title": "Whole Assembly"
        },
        {
            "location": "/assemblies/#minimal-assembly",
            "text": "A minimal assebly consists of only joint parts connected.\nThis arrangement would requiere a tether line for both power and control, but depending on the application it may be a better choice.\nIn this case, the axes of the joints have a difference of 90[deg] between each other, proviging 3D motion to the robot.\nOther types of locomotion can be implemented, like sidewinding.",
            "title": "Minimal Assembly"
        },
        {
            "location": "/prototype/",
            "text": "Prototype - Current Progress\n\n\nThis section contains additional information about the current physical realization of \nOPPAS\n.\nAlthough the design (at least for Mk. 1.0) is considered at this stage, the development is still in progress.\nIn particular, the electronics and programming are still in development stages and being documented in other repositories.\n\n\nTODO",
            "title": "Prototype Development"
        },
        {
            "location": "/prototype/#prototype-current-progress",
            "text": "This section contains additional information about the current physical realization of  OPPAS .\nAlthough the design (at least for Mk. 1.0) is considered at this stage, the development is still in progress.\nIn particular, the electronics and programming are still in development stages and being documented in other repositories.  TODO",
            "title": "Prototype - Current Progress"
        },
        {
            "location": "/about/",
            "text": "About this Library\n\n\nThis site provides documentation for the snake robot \nOPPAS\n, an open-source and parametric snake robot.\nFiles can be downloaded in \nTODO\n.\nRelated projects can be found in \nFabReyesMecha\n.\n\n\nProjects to check:\n\n\n\n\n\n\n\n\nProject\n\n\nDescription\n\n\nStatus\n\n\nLink (documentation)\n\n\n\n\n\n\n\n\n\n\nOPPAS\n\n\nAn open-source parametric snake robot\n\n\nActive. Documented.\n\n\nhttps://fabreyesmecha.github.io/OPPAS/\n\n\n\n\n\n\nDuoDMXL\n\n\nLibrary and hardware to control Dynamixel servos with a \nDuo\n microcontroller board\n\n\nActive. Documented\n\n\nhttps://fabreyesmecha.github.io/DuoDMXL/\n\n\n\n\n\n\nserial_nrF24\n\n\nLibrary for passing information from a PC to a nrF24L01+\n\n\nIn development. Not documented\n\n\nNA\n\n\n\n\n\n\nrobCon\n\n\nA library for closed-loop control of a robot using a PC. Compatible with Duo and a PC master using Python or Mathematica\n\n\nIn development. Not documented\n\n\nNA\n\n\n\n\n\n\n\n\nAbout the author\n\n\nIf you have any question contact me through the \nGitHub repository\n or to my e-mail address:\n\nbugundianvolker@gmail.com\n.\nIn addition to my GitHub profile, I add 3D models at the following sites. You may find something of interest.\n\n\n\n\nGitHub Profile: \nhttps://github.com/FabReyesMecha\n\n\nThingiverse: \nhttp://www.thingiverse.com/FabReyes/about\n\n\nGrabCAD: \nhttps://grabcad.com/fabian.r-3/public\n\n\nFusion 360 Gallery: \nhttps://gallery.autodesk.com/fusion360/users/GZE6K5HX3P2F\n\n\n\n\nIn addition, you may find my publications and public academic profile at:\n\n\n\n\nRitsumeikan University: \nhttp://ri-search.ritsumei.ac.jp/field/007/41/139/0000000179/profile.html\n\n\nGoogle Scholar: No idea how to give my google scholar profile. I think it should be public.\n\n\n\n\nFull disclosure: I sometimes upload things not related to my research.\nDon't hesitate in contacting me for unrelated stuff.\n\n\n\n\nImage by \nernestdesigns\n\n\nBioInMech Laboratory at Ritsumeikan University\n\n\nOPPAS\n has been developed during my research at Ritsumeikan University (Japan) at the \nBioInMech Home page\n (Biomimetic Intellignet Mechatronics) Laboratory.\n\n\nThe design of \nOPPAS\n was motivated because I did not find any other snake robot prototype that meet the requirements for my project.\nI am relatively new to CAD and in general, my speciality is not mechanical design.\nI prefer the mathematical part, like modelling of dynamic systems or control thepory.\nHowever, I found Fusion 360 to be a very enjoyable and promising software, especially because of the possibilities to collaborate and share projects ina bettwr way than other CAD software.\nI never really got into SolidWorks.\nThe timeline of Fusion 360 and other features fit very well with my workflow.\n\n\nAlthough \nOPPAS\n is a project developed at RU, I consider it my personal 'baby', since it has been almost all self-financed and developed in my free time (in other words, no vacations or weekends).\nThis is because my main tasks are, as mentioned earlier, related to more theoretical problems.\nI hope \nOPPAS\n can be an interesting project, not only for researchers (research about locomotion with snake robots has increased in the last years), but also for any user.\nI hope snake robots will become more widespread, someday.\n\n\nOPPAS\n Mk. 0.9 (Not the version documented here) is being presented in \nROBOMECH 2017\n at Fukushima, Japan.\n\n\nLicense\n\n\nOPPAS\n is a project being developed in Ritsumeikan University, by the Biomimetic Intelligent Mechatronics (BioInMech) Laboratory.\n\nOPPAS\n is licensed under the \nCreative Commons Attribution 4.0 International\n license to \nFabian Eugenio Reyes Pinner\n (Fabian Reyes) (2017).\nA summary of the license is provided below:\n\n\nYou are free to:\n\n    Share \u2014 copy and redistribute the material in any medium or format\n    Adapt \u2014 remix, transform, and build upon the material\n    for any purpose, even commercially.\n\n    The licensor cannot revoke these freedoms as long as you follow the license terms.\n\n    Under the following terms:\n\n    Attribution \u2014 You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n\n    No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.\n\n\n\n\nThis work is licensed under a \nCreative Commons Attribution 4.0 International License\n.\nThe full license can be found here: \nhttps://creativecommons.org/licenses/by/4.0/legalcode\n\n\nBioInMech's logo is property of the BioInMech Laboratory.",
            "title": "About"
        },
        {
            "location": "/about/#about-this-library",
            "text": "This site provides documentation for the snake robot  OPPAS , an open-source and parametric snake robot.\nFiles can be downloaded in  TODO .\nRelated projects can be found in  FabReyesMecha .  Projects to check:     Project  Description  Status  Link (documentation)      OPPAS  An open-source parametric snake robot  Active. Documented.  https://fabreyesmecha.github.io/OPPAS/    DuoDMXL  Library and hardware to control Dynamixel servos with a  Duo  microcontroller board  Active. Documented  https://fabreyesmecha.github.io/DuoDMXL/    serial_nrF24  Library for passing information from a PC to a nrF24L01+  In development. Not documented  NA    robCon  A library for closed-loop control of a robot using a PC. Compatible with Duo and a PC master using Python or Mathematica  In development. Not documented  NA",
            "title": "About this Library"
        },
        {
            "location": "/about/#about-the-author",
            "text": "If you have any question contact me through the  GitHub repository  or to my e-mail address: bugundianvolker@gmail.com .\nIn addition to my GitHub profile, I add 3D models at the following sites. You may find something of interest.   GitHub Profile:  https://github.com/FabReyesMecha  Thingiverse:  http://www.thingiverse.com/FabReyes/about  GrabCAD:  https://grabcad.com/fabian.r-3/public  Fusion 360 Gallery:  https://gallery.autodesk.com/fusion360/users/GZE6K5HX3P2F   In addition, you may find my publications and public academic profile at:   Ritsumeikan University:  http://ri-search.ritsumei.ac.jp/field/007/41/139/0000000179/profile.html  Google Scholar: No idea how to give my google scholar profile. I think it should be public.   Full disclosure: I sometimes upload things not related to my research.\nDon't hesitate in contacting me for unrelated stuff.   Image by  ernestdesigns",
            "title": "About the author"
        },
        {
            "location": "/about/#bioinmech-laboratory-at-ritsumeikan-university",
            "text": "OPPAS  has been developed during my research at Ritsumeikan University (Japan) at the  BioInMech Home page  (Biomimetic Intellignet Mechatronics) Laboratory.  The design of  OPPAS  was motivated because I did not find any other snake robot prototype that meet the requirements for my project.\nI am relatively new to CAD and in general, my speciality is not mechanical design.\nI prefer the mathematical part, like modelling of dynamic systems or control thepory.\nHowever, I found Fusion 360 to be a very enjoyable and promising software, especially because of the possibilities to collaborate and share projects ina bettwr way than other CAD software.\nI never really got into SolidWorks.\nThe timeline of Fusion 360 and other features fit very well with my workflow.  Although  OPPAS  is a project developed at RU, I consider it my personal 'baby', since it has been almost all self-financed and developed in my free time (in other words, no vacations or weekends).\nThis is because my main tasks are, as mentioned earlier, related to more theoretical problems.\nI hope  OPPAS  can be an interesting project, not only for researchers (research about locomotion with snake robots has increased in the last years), but also for any user.\nI hope snake robots will become more widespread, someday.  OPPAS  Mk. 0.9 (Not the version documented here) is being presented in  ROBOMECH 2017  at Fukushima, Japan.",
            "title": "BioInMech Laboratory at Ritsumeikan University"
        },
        {
            "location": "/about/#license",
            "text": "OPPAS  is a project being developed in Ritsumeikan University, by the Biomimetic Intelligent Mechatronics (BioInMech) Laboratory. OPPAS  is licensed under the  Creative Commons Attribution 4.0 International  license to  Fabian Eugenio Reyes Pinner  (Fabian Reyes) (2017).\nA summary of the license is provided below:  You are free to:\n\n    Share \u2014 copy and redistribute the material in any medium or format\n    Adapt \u2014 remix, transform, and build upon the material\n    for any purpose, even commercially.\n\n    The licensor cannot revoke these freedoms as long as you follow the license terms.\n\n    Under the following terms:\n\n    Attribution \u2014 You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n\n    No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.  This work is licensed under a  Creative Commons Attribution 4.0 International License .\nThe full license can be found here:  https://creativecommons.org/licenses/by/4.0/legalcode  BioInMech's logo is property of the BioInMech Laboratory.",
            "title": "License"
        }
    ]
}